text
**Layered Architecture**: Systems are organized into distinct layers (e.g., presentation, business logic, data) to separate concerns, enabling modularity and scalability.. Think in terms of layered, c/s and tiered Systems are organized into distinct layers (e.g., presentation, business logic, data) to separate concerns, enabling modularity and scalability.
**Client-Server Architecture**: A model where clients request services from a centralized server, often used in traditional web applications.. Think in terms of layered, c/s and tiered. What are the implications of the design differences between a traditional web and a “client centric” web architecture?
**Tiered Architecture**: A layered approach with multiple intermediate layers (e.g., web, application, database) to manage complexity and performance.. Think in terms of layered, c/s and tiered
**Event-Driven vs. Polling**: Event-driven models (e.g., Java Message Driven Beans) react to asynchronous events, while polling involves repeatedly checking for updates, with event-driven being more efficient for real-time systems.. Event-driven models (e.g., Java Message Driven Beans) react to asynchronous events, while polling involves repeatedly checking for updates, with event-driven being more efficient for real-time systems.
**Message Correlation**: Unique identifiers (e.g., correlation IDs) are used to track and associate messages across distributed systems, ensuring consistency in transactions.. Unique identifiers (e.g., correlation IDs) are used to track and associate messages across distributed systems, ensuring consistency in transactions.
**SOAP vs. REST**:. SOAP and REST are two different approaches to API design. The SOAP approach is highly structured and uses XML data format. REST is more flexible and allows applications to exchange data in multiple formats. SOAP and REST are two different approaches to API design. The SOAP approach is highly structured and uses XML data format. REST is more flexible and allows applications to exchange data in multiple formats. SOAP and REST are two internet data exchange mechanisms. For example, imagine that your internal accounts system shares data with your customer's accounting system to automate invoicing tasks. The two applications share data by using an API that defines communication rules. SOAP and REST are two different approaches to API design. The SOAP approach is highly structured and uses XML data format. REST is more flexible and allows applications to exchange data in multiple formats. SOAP and REST are two different approaches to API design. The SOAP approach is highly structured and uses XML data format. REST is more flexible and allows applications to exchange data in multiple formats.
**ACID Compliance**: SOAP inherently supports ACID (Atomicity, Consistency, Isolation, Durability), while REST may require additional tools for transaction management.. SOAP has built-in compliance for atomicity, consistency, isolation, and durability (ACID). And SOAP may be better suited for high data integrity requirements. REST APIs may require additional software modules to enforce the state at the server or database level.
**Security in Web Services**:. Security – confidentiality of information, firewall concern They both support SSL/TLS for secure, encrypted communication Conversely, some private APIs for internal enterprise requirements (like data reporting for compliance) may benefit from the tighter security measures in WS-Security of SOAP
**Message-Driven Beans**: A Java EE pattern for event-driven communication, where beans are triggered by messages from JMS queues or topics.. Example of event-driven – Java Message Driven Beans Poll or event-driven better? Example of event-driven – Java Message Driven Beans Poll or event-driven better?
**Exception Handling**: Critical in distributed systems to manage failures, log errors, and ensure graceful degradation or rollback.. Exception Handling: Critical in distributed systems to manage failures, log errors, and ensure graceful degradation or rollback.
**Web Services Standards**:. SOAP – Simple Object Access Protocol, WSDL – Web Services Description Language, UDDI – Universal Description, Discovery and Integration Web services communicate over HTTP. HTTP is a protocol used by all web-based applications. Hence, it just made sense to ensure that Web services also had the ability to work over the HTTP protocol Most public-facing APIs now use REST, because it consumes less bandwidth and its compatibility with HTTP makes it easier for web browsers to use SOAP and REST are two different approaches to API design. The SOAP approach is highly structured and uses XML data format. REST is more flexible and allows applications to exchange data in multiple formats They both use HTTP, the standardized internet protocol, to exchange information It is built using the XML programming language. Almost all modern day technologies such as .Net and Java have corresponding commands that have the ability to work with XML. Hence, XML was taken as the most appropriate language for building web services The WSDL file is written in plain old XML. The reason that it is in XML is so that the file can be read by any programming language
**XML in Web Services**: XML is the primary format for data exchange, ensuring interoperability across languages and platforms.. It is built using the XML programming language. Almost all modern day technologies such as .Net and Java have corresponding commands that have the ability to work with XML. Hence, XML was taken as the most appropriate language for building web services. The WSDL file is written in plain old XML. The reason that it is in XML is so that the file can be read by any programming language. SOAP is highly structured and uses XML data format.
"**REST vs. SOAP Use Cases**:. Most public-facing APIs now use REST, because it consumes less bandwidth and its compatibility with HTTP makes it easier for web browsers to use. However, you may find that the additional features and security offered by SOAP are enough to sway your decision. In the end, the ""right"" choice between SOAP and REST will be highly dependent on your own situation. SOAP may be better suited for high data integrity requirements. In this case, REST APIs may require additional software modules to enforce the state at the server or database level. Modern applications like mobile apps and hybrid applications work better with REST APIs. REST gives you the scalability and flexibility to design applications using modern architecture patterns like microservices and containers. However, if you need to integrate or extend legacy systems that already have SOAP APIs, you may be better off continuing with SOAP. Public APIs have lower security requirements and demand greater flexibility so anyone can interact with them. So, REST is a better choice when you build public APIs. Conversely, some private APIs for internal enterprise requirements (like data reporting for compliance) may benefit from the tighter security measures in WS-Security of SOAP."
**Serverless Architecture**: AWS Lambda enables event-driven, scalable, and cost-effective execution of code without managing infrastructure.. AWS Lambda enables event-driven, scalable, and cost-effective execution of code without managing infrastructure.
"**Microservices and Architecture Patterns**: Microservices leverage RESTful APIs, asynchronous messaging, and containerization for decentralized, scalable systems.. REST should be considered the ""default"" option as adoption continues to grow across the web. Microservices leverage RESTful APIs, asynchronous messaging, and containerization for decentralized, scalable systems. Example of event-driven – Java Message Driven Beans"
**Firewall and Confidentiality**: Security measures like firewalls, encryption, and access controls protect data integrity and privacy in distributed systems.. Security – confidentiality of information, firewall concern
**Layered Diagram Notations**: Systems are visualized with clear separation of layers (e.g., UI, business logic, data) to represent architecture and dependencies.. Think in terms of layered, c/s and tiered Note that for this course, please follow the notations described for layered diagrams. Systems are visualized with clear separation of layers (e.g., UI, business logic, data) to represent architecture and dependencies.
**Distributed System Design**: Requires coordination mechanisms (e.g., message IDs, transactions) to ensure consistency across nodes.. In distributed systems, message IDs and correlations are essential for ensuring that messages are processed correctly across different nodes. Distributed systems require robust transaction handling to maintain data consistency across multiple nodes. SOAP has built-in compliance for atomicity, consistency, isolation, and durability (ACID).
**Hybrid Architectures**: Combine client-server models with event-driven or microservices to balance scalability, reliability, and legacy compatibility.. Think in terms of layered, c/s and tiered Example of event-driven – Java Message Driven Beans Poll or event-driven better?
