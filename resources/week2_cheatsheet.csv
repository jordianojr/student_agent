text
**TCP Three-Way Handshake**: Establishes a reliable connection between a client (e.g., Bob’s browser) and a server (e.g., Google’s HTTP server) by exchanging SYN, SYN-ACK, and ACK segments. This ensures data integrity and ordered delivery.. Bob’s laptop thus first creates a TCP SYN segment with destination port 80 (for HTTP), places the TCP segment inside an IP datagram with a destination IP address of 64.233.169.105 (www.google.com), places the datagram inside a frame with a destination MAC address of 00:22:6B:45:1F:1B (the gateway router) and sends the frame to the switch. A TCP SYNACK (Section 3.5.6) segment is generated, placed inside a datagram addressed to Bob’s laptop, and finally placed inside a link-layer frame appropriate for the link connecting www.google.com to its first-hop router. The datagram containing the TCP SYNACK segment is forwarded through the Google, Comcast, and school networks, eventually arriving at the Ethernet card in Bob’s laptop. The datagram is demultiplexed within the operating system to the TCP socket created in step 18, which enters the connected state.
"**DNS Resolution**: Translates human-readable domain names (e.g., www.google.com) into IP addresses (e.g., 64.233.169.105) using DNS queries, which are sent to a DNS server (e.g., the gateway router’s DNS address from DHCP).. the operating system on Bob’s laptop thus creates a DNS query message (Section 2.5.3), putting the string ""www.google.com"" in the question section of the DNS message. this DNS message is then placed within a UDP segment with a destination port of 53 (DNS server). The UDP segment is then placed within an IP datagram with an IP destination address of 68.87.71.226 (the address of the DNS server returned in the DHCP ACK in step 5) and a source IP address of 68.85.2.101. Bob’s laptop then places the datagram containing the DNS query message in an Ethernet frame. This frame will be sent (addressed, at the link layer) to the gateway router in Bob’s school’s network."
**ARP for MAC Address Discovery**: Resolves the MAC address of a gateway router (e.g., 68.85.2.1) by sending an ARP request broadcast, which the router replies to with its MAC address.. Bob’s laptop will need to use the ARP protocol (Section 6.4.1). Bob’s laptop creates an ARP query message with a target IP address of 68.85.2.1 (the default gateway), places the ARP message within an Ethernet frame with a broadcast destination address (FF:FF:FF:FF:FF:FF) and sends the Ethernet frame to the switch, which delivers the frame to all connected devices, including the gateway router. The gateway router receives the frame containing the ARP query message on the interface to the school network, and finds that the target IP address of 68.85.2.1 in the ARP message matches the IP address of its interface. The gateway router thus prepares an ARP reply, indicating that its MAC address of 00:22:6B:45:1F:1B corresponds to IP address 68.85.2.1. It places the ARP reply message in an Ethernet frame, with a destination address of 00:16:D3:23:68:8A (Bob’s laptop) and sends the frame to the switch, which delivers the frame to Bob’s laptop.
**DHCP IP Assignment**: Allocates an IP address (e.g., 68.85.2.101) and DNS server information to a client (e.g., Bob’s laptop) to enable network communication and name resolution.. Bob’s laptop then records its IP address and the IP address of its DNS server. Bob’s DHCP client then records its IP address and the IP address of its DNS server. It also installs the address of the default gateway into its IP forwarding table.
**Layered vs. Tiered Architecture**: Layers (e.g., application, transport, network, data link, physical) are logical, while tiers (e.g., core, distribution, access) are physical. Layers can exist within tiers but not vice versa.. Layered are logical, tiered are physical. C/S? Layers can exist inside a tiered but not the other way Layered are usually drawn vertically stacked (except for cross cutting layers). Tiered are usually drawn horizontally across.
**Network Stack Structure**: The TCP/IP model consists of layers (application, transport, internet, network access) that stack vertically, with each layer handling specific functions (e.g., TCP for reliable data transfer, IP for routing).. Layered are logical, tiered are physical. C/S? Layers can exist inside a tiered but not the other way The TCP/IP model consists of layers (application, transport, internet, network access) that stack vertically, with each layer handling specific functions (e.g., TCP for reliable data transfer, IP for routing)
**Inter-Domain Routing**: Packets traverse multiple networks (e.g., school, Comcast, Google) using routing tables, with inter-domain routing governed by BGP (Border Gateway Protocol) for dynamic path selection.. Recall that the router forwarding table entries governing forwarding of packets over the inter-domain link between the Comcast and Google networks are determined by the BGP protocol (Chapter 5).
**State Management in TCP**: The three-way handshake and subsequent state transitions (SYN, SYN-ACK, ACK) ensure that both ends of a connection are synchronized and ready to exchange data.. Bob’s laptop thus first creates a TCP SYN segment with destination port 80 (for HTTP), places the TCP segment inside an IP datagram with a destination IP address of 64.233.169.105 (www.google.com), places the datagram inside a frame with a destination MAC address of 00:22:6B:45:1F:1B (the gateway router) and sends the frame to the switch. A TCP SYNACK (Section 3.5.6) segment is generated, placed inside a datagram addressed to Bob’s laptop, and finally placed inside a link-layer frame appropriate for the link connecting www.google.com to its first-hop router. The datagram is demultiplexed within the operating system to the TCP socket created in step 18, which enters the connected state.
**HTTP Request-Response Cycle**: A client (e.g., browser) sends an HTTP GET request to a server (e.g., Google), which responds with the requested web page content (e.g., HTML) after processing the request.. Bob’s browser creates the HTTP GET message (Section 2.2.3) containing the URL to be fetched. The HTTP GET message is then written into the socket, with the GET message becoming the payload of a TCP segment. The HTTP server at www.google.com reads the HTTP GET message from the TCP socket, creates an HTTP response message (Section 2.2), places the requested Web page content in the body of the HTTP response message, and sends the message into the TCP socket. The datagram containing the HTTP reply message is forwarded through the Google, Comcast, and school networks, and arrives at Bob’s laptop. Bob’s Web browser program reads the HTTP response from the socket, extracts the html for the Web page from the body of the HTTP response, and finally (finally!) displays the Web page! Bob’s browser creates the HTTP GET message (Section 2.2.3) containing the URL to be fetched. The HTTP GET message is then written into the socket, with the GET message becoming the payload of a TCP segment.
**ARP/Route Table Interaction**: ARP resolves MAC addresses for local network communication, while routing tables direct packets across networks (e.g., from Bob’s school to Google’s network).. Bob’s laptop creates an ARP query message with a target IP address of 68.85.2.1 (the default gateway), places the ARP message within an Ethernet frame with a broadcast destination address (FF:FF:FF:FF:FF:FF) and sends the Ethernet frame to the switch, which delivers the frame to all connected devices, including the gateway router. The routers in the school network, Comcast’s network, and Google’s network forward the datagram containing the TCP SYN toward www.google.com, using the forwarding table in each router, as in steps 14–16 above. Recall that the router forwarding table entries governing forwarding of packets over the inter-domain link between the Comcast and Google networks are determined by the BGP protocol (Chapter 5). Bob’s laptop sends this frame to the switch, which delivers the frame to the gateway router
**Stateless vs. Stateful Protocols**: DNS and ARP are stateless, while TCP is stateful, maintaining connection states (e.g., SYN, ESTABLISHED) to ensure reliable communication.. Bob’s laptop thus creates a TCP SYN segment with destination port 80 (for HTTP), places the TCP segment inside an IP datagram with a destination IP address of 64.233.169.105 (www.google.com), places the datagram inside a frame with a destination MAC address of 00:22:6B:45:1F:1B (the gateway router) and sends the frame to the switch.
**Role of Gateways**: The default gateway (e.g., 68.85.2.1) acts as a bridge between a local network (e.g., school) and external networks (e.g., the internet), routing traffic based on IP addresses.. Bob’s laptop will send all datagrams with destination address outside of its subnet 68.85.2.0/24 to the default gateway.
**DNS Recursive Queries**: A client may use a recursive DNS resolver (e.g., the gateway router’s DNS server) to resolve a domain name, which in turn queries other DNS servers (e.g., root servers, TLD servers) to find the correct IP address.. The operating system on Bob’s laptop thus creates a DNS query message (Section 2.5.3), putting the string “www.google.com” in the question section of the DNS message. This DNS message is then placed within a UDP segment with a destination port of 53 (DNS server). The UDP segment is then placed within an IP datagram with an IP destination address of 68.87.71.226 (the address of the DNS server returned in the DHCP ACK in step 5) and a source IP address of 68.85.2.101.
**IP Addressing and Subnetting**: The IP address (e.g., 68.85.2.101) includes a network portion (e.g., 68.85.2.0/24) and host portion, enabling routing decisions and subnet-based communication.. Bob’s laptop then places the datagram containing the DNS query message in an Ethernet frame. This frame will be sent (addressed, at the link layer) to the gateway router in Bob’s school’s network. Bob’s laptop has the IP address of www.google.com, it can create the TCP socket [...] with a destination IP address of 64.233.169.105 (www.google.com), places the datagram inside a frame with a destination MAC address of 00:22:6B:45:1F:1B (the gateway router) and sends the frame to the switch. the IP address of www.google.com, it can create the TCP socket [...] with a destination IP address of 64.233.169.105 (www.google.com), places the datagram inside a frame with a destination MAC address of 00:22:6B:45:1F:1B (the gateway router) and sends the frame to the switch. the IP address of www.google.com, it can create the TCP socket [...] with a destination IP address of 64.233.169.105 (www.google.com), places the datagram inside a frame with a destination MAC address of 00:22:6B:45:1F:1B (the gateway router) and sends the frame to the switch.
**Routing Table Entries**: Routers use forwarding tables to determine the next hop for packets, with entries determined by BGP for inter-domain routing and static/dynamic routing protocols for intra-domain traffic.. the router forwarding table entries governing forwarding of packets over the inter-domain link between the Comcast and Google networks are determined by the BGP protocol (Chapter 5)
**End-to-End Principle**: Communication is handled by end hosts (e.g., Bob’s laptop and Google’s server) rather than intermediate routers, ensuring reliability and flexibility in network design.. Bob’s laptop thus first creates a TCP SYN segment with destination port 80 (for HTTP), places the TCP segment inside an IP datagram with a destination IP address of 64.233..169.105 (www.google.com), places the datagram inside a frame with a destination MAC address of 00:22:6B:45:1F:1B (the gateway router) and sends the frame to the switch. The TCP SYN message is extracted from the datagram and demultiplexed to the welcome socket associated with port 80. A connection socket (Section 2.7) is created for the TCP connection between the Google HTTP server and Bob’s laptop. The HTTP GET message is then written into the socket, with the GET message becoming the payload of a TCP segment. The TCP segment is placed in a datagram and sent and delivered to www.google.com as in steps 18–20 above. The HTTP server at www.google.com reads the HTTP GET message from the TCP socket, creates an HTTP response message (Section 2.2), places the requested Web page content in the body of the HTTP response message, and sends the message into the TCP socket.
IP address ranges 0.0.0.0 through 0.255.255.255 are not part of the normal Class A range and are reserved for special purposes, though nodes using them cannot communicate properly on the Internet.. The address range from 0.0.0.0 through 0.255.255.255 should not be considered part of the normal Class A range. 0.x.x.x addresses serve no particular function in IP, but nodes attempting to use them will be unable to communicate properly on the Internet.
The loopback address 127.0.0.1 is used to test network adapters, as messages sent to it are intercepted by the adapter and returned to the application without being sent to the network.. Messages sent to 127.0.0.1 do not get delivered to the network. Instead, the adapter intercepts all loopback messages and returns them to the sending application.
Addresses 127.0.0.0 through 127.255.255.255 are reserved for loopback, while 224.0.0.0 through 224.0.0.255 are reserved for routing protocols and multicast-related protocols.. 127.0.0.0 through 127.255.255.255 reserved for loopback The range of addresses between 224.0.0.0 and 224.0.0.255, inclusive, is reserved for the use of routing protocols and other low-level topology discovery or maintenance protocols, such as gateway discovery and group membership reporting.
Multicast addresses in the range 224.0.0.0–224.0.0.255 are reserved for routing protocols and low-level topology discovery, and multicast routers should not forward datagrams with destination addresses in this range.. 224-239 are used for multicast (see http://www.firewall.cx/multicast-intro.php, also Google IGMP & PIM)) The range of addresses between 224.0.0.0 and 224.0..255, inclusive, is reserved for the use of routing protocols and other low-level topology discovery or maintenance protocols, such as gateway discovery and group membership reporting. Multicast routers should not forward any multicast datagram with destination addresses in this range, regardless of its TTL.
Addresses 255.0.0.0 through 255.255.255.255 are reserved for IP broadcast, where packets are sent to all devices on a network.. 255.0.0.0 through 255.255.255.255 reserved for IP broadcast
The Class C network 192.168.1.0/24 (subnet mask 255.255.255.0) is divided into two /25 subnets: 192.168.1.0/25 (hosts 192.168.1.0–192.168.1.127) and 192.168.1.128/25 (hosts 192.168.1.128–192.168.1.255).. The address range from 0.0.0.0 through 0.255.255.255 should not be considered part of the normal Class A range. 0.x.x.x addresses serve no particular function in IP, but nodes attempting to use them will be unable to communicate properly on the Internet. 192.168.1.0/24    255.255.255.0 (subnet mask) Divided equally into 2 subnets of 128 hosts 192.168.1.0 – 192.168.1.127 = 192.168.1.0/25 (hosts 192.168.1.0–192.168.1.127) and 192.168.1.128/25 (hosts 192.168.1.128–192.168.1.255).
The /25 subnet mask allows 128 hosts per subnet, with the first host in each subnet being the network address and the last host being the broadcast address.. Divided equally into 2 subnets of 128 hosts
"Network packet encapsulation involves adding headers at each layer: application (API) → TCP → IP → Ethernet, with each layer’s header containing source/destination addresses and control information.. Encapsulation... TCP requests IP packet to be sent to ""B""... IP requests packet to be sent to router. Link (Ethernet) Protocol creates media access control (MAC) frame to router R1 Encapsulation... TCP Packet Encapsulation... TCP Header... IP Header... Ethernet Header... Destination Address: MAC ""R1""... Source Address: MAC ""A""... Type = Connection Setup Encapsulation... In the sending host... TCP creates TCP packet... IP creates IP packet with correct addresses... Link (Ethernet) Protocol creates media access control (MAC) frame to router R1 Encapsulation... In the receiving host... Link (Ethernet) Protocol... Decapsulation... Extract/Decapsulate TCP packet from IP packet... Pass TCP packet to TCP Protocol"
"Decapsulation occurs in reverse order, starting at the receiving host (Ethernet → IP → TCP → API), with each layer extracting and verifying the data.. 13. Link (Ethernet) Protocol Accept MAC frame Pass data to IP Protocol. 14. Internet Protocol (IP) Verify IP address. Extract/Decapsulate TCP packet from IP packet. 15. Transmission Control Protocol (TCP) Accepts TCP ""Connection setup"" packet 16. Application-Programming Interface (API) Application receives request for TCP connection with ""A""."
"A network packet travels from Host A to Host B through routers R1–R5, with each router using IP destination addresses to determine the next hop and forwarding the packet through Ethernet layers..  In Router R1 5. Link (Ethernet) Protocol Accept MAC frame Pass data to IP Protocol. 6. Internet Protocol (IP) Use IP destination address to decide where to send packet next (""next-hop routing""). Request Link Protocol to transmit packet.  In Router R5 10. Link (Ethernet) Protocol Accept MAC frame Pass data to IP Protocol. 11. Internet Protocol (IP) Use IP destination address to decide where to send packet next (""next-hop routing""). Request Link Protocol to transmit packet.  In Network Devices R2, R3, R4 8. Network devices can be used to interconnect networks A Hub interconnects devices at layer 1 layer (physical) A collision domain is part of a network where packet collisions can occur. A broadcast domain is a domain in which a broadcast is forwarded.  In Router R1 5. Link (Ethernet) Protocol Accept MAC frame Pass data to IP Protocol. 6. Internet Protocol (IP) Use IP destination address to decide where to send packet next (""next-hop routing""). Request Link Protocol to transmit packet.  In Router R5 10. Link (Ethernet) Protocol Accept MAC frame Pass data to IP Protocol. 11. Internet Protocol (IP) Use IP destination address to decide where to send packet next (""next-hop routing""). Request Link Protocol to transmit packet."
Hubs create a single collision domain and broadcast domain for all connected devices, while switches isolate each port into its own collision domain but share a single broadcast domain.. A Hub interconnects devices at layer 1 layer (physical). A collision domain is part of a network where packet collisions can occur. A broadcast domain is a domain in which a broadcast is forwarded. For all hosts connected through a hub, there is one collision domain and one broadcast domain. A Switch interconnects devices primarily at layer 2 layer (data link). Buffering of frames prevents collisions. Each port is isolated and builds its own collision domain. For all hosts connected through a switch, each port is isolated and builds its own collision domain but broadcast domain remains as one.
Routers operate at Layer 3, dividing collision and broadcast domains for devices connected through them, and are used to interconnect LANs and WANs.. A Router or Gateway interconnect devices & networks at Layer 3 layer (network). Typically connect local area network (LANs) and wide area network (WANs) together. Router divide collision and broadcast domains of hosts connected through it.
Multicast (224–239) is used for one-to-many communication, with protocols like IGMP and PIM managing group membership and multicast traffic.. 224-239 are used for multicast (see http://www.firewall.cx/multicast-intro.php, also Google IGMP & PIM))
The loopback address (127.0.0.1) is critical for testing network interface behavior without involving the physical network.. 127.0.0.1 loopback test mechanism of network adapters. Messages sent to 127.0.0.1 do not get delivered to the network. Instead, the adapter intercepts all loopback messages and returns them to the sending application.
"The encapsulation process includes Ethernet headers (MAC addresses) and IP headers (IP addresses), with TCP headers ensuring reliable data transfer between hosts.. Encapsulation... IP Packet... Ethernet Packet... Destination Address: MAC ""R1""... Source Address: MAC ""A""... IP... Destination Address: IP ""B""... Source Address: IP ""A""... TCP... Type = Connection Setup Encapsulation... TCP Packet... Encapsulation... TCP Header TCP Packet... Encapsulation... TCP Header"
Network devices like hubs, switches, and routers handle data transmission at different layers (Layer 1, 2, and 3), with switches and routers preventing collisions and managing broadcast domains.. A Hub interconnects devices at layer 1 layer (physical) A collision domain is part of a network where packet collisions can occur. A broadcast domain is a domain in which a broadcast is forwarded. For all hosts connected through a hub, there is one collision domain and one broadcast domain. A Switch interconnects devices primarily at layer 2 layer (data link) Buffering of frames prevents collisions. Each port is isolated and builds its own collision domain. For all hosts connected through a switch, each port is isolated and builds its own collision domain but broadcast domain remains as one. Router divide collision and broadcast domains of hosts connected through it.
Subnetting divides a network into smaller subnets, with each subnet’s address range determined by the subnet mask and the network ID.. 192.168.1.0/24 255.255.255.0 (subnet mask) Divided equally into 2 subnets of 128 hosts. 192.168.1.0 – 192.168.1.127 = 192.168.1.0/25
Multicast routers must not forward datagrams with destination addresses in the reserved range (224.0.0.0–224.0.0.255), regardless of their Time-to-Live (TTL) value.. The range of addresses between 224.0.0.0 and 224.0.0.255, inclusive, is reserved for the use of routing protocols and other low-level topology discovery or maintenance protocols, such as gateway discovery and group membership reporting. Multicast routers should not forward any multicast datagram with destination addresses in this range, regardless of its TTL.
